@model BilliardsManagement.Models.ViewModels.TableServiceViewModel
@{
    ViewData["Title"] = $"Dịch vụ - {Model.Table.TableName}";
    Layout = "_Layout";
    
    // Calculate elapsed time
    TimeSpan elapsedTime = DateTime.Now - Model.Session.StartTime.Value;
    string elapsedTimeStr = $"{elapsedTime.Hours:00}:{elapsedTime.Minutes:00}:{elapsedTime.Seconds:00}";
    
    // Calculate current table cost - exact time calculation (not rounded)
    double totalHoursExact = elapsedTime.TotalHours;
    decimal tableTotal = (decimal)(totalHoursExact * (double)Model.Table.PricePerHour);
    
    // Calculate grand total (table + services)
    decimal grandTotal = tableTotal + Model.OrderTotal;
}

<div class="container-fluid mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <a asp-controller="Manager" asp-action="BackToDashboard" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left me-2"></i>Quay lại
            </a>
            <h2 class="mb-0"><i class="bi bi-cart-plus me-2"></i>Thêm dịch vụ</h2>
        </div>
    </div>
    
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <div class="row">
        <!-- Table Information -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-info-circle me-2"></i>Thông tin bàn</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4 fw-bold">Bàn:</div>
                        <div class="col-md-8">@Model.Table.TableName</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4 fw-bold">Loại bàn:</div>
                        <div class="col-md-8">
                            <span class="badge @(Model.Table.TableType == "VIP" ? "bg-warning" : "bg-info")">
                                @Model.Table.TableType
                            </span>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4 fw-bold">Giá/giờ:</div>
                        <div class="col-md-8">@Model.Table.PricePerHour?.ToString("N0") đ</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4 fw-bold">Bắt đầu:</div>
                        <div class="col-md-8">@Model.Session.StartTime?.ToString("dd/MM/yyyy HH:mm:ss")</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4 fw-bold">Thời gian chơi:</div>
                        <div class="col-md-8">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-stopwatch me-2"></i>
                                <span id="elapsedTime">@elapsedTimeStr</span>
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-4 fw-bold">Tiền bàn:</div>
                        <div class="col-md-8" id="tableTotal">@tableTotal.ToString("N0") đ</div>
                    </div>
                </div>
            </div>
            
            <!-- Current Order Summary -->
            <div class="card mt-4">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0"><i class="bi bi-receipt me-2"></i>Tổng hóa đơn</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-6 fw-bold">Tiền bàn:</div>
                        <div class="col-md-6 text-end" id="tableTotalSummary">@tableTotal.ToString("N0") đ</div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6 fw-bold">Tiền dịch vụ:</div>
                        <div class="col-md-6 text-end" id="serviceTotalSummary">@Model.OrderTotal.ToString("N0") đ</div>
                    </div>
                    <hr>
                    <div class="row mb-3">
                        <div class="col-md-6 fw-bold">Tổng cộng:</div>
                        <div class="col-md-6 text-end fw-bold fs-5" id="grandTotal">@grandTotal.ToString("N0") đ</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Service Management -->
        <div class="col-md-8">
            <!-- Current Order -->
            <div class="card mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="bi bi-cart me-2"></i>Đơn hàng hiện tại</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover" id="orderTable">
                            <thead>
                                <tr>
                                    <th style="width: 30%">Tên món</th>
                                    <th style="width: 20%">Đơn giá</th>
                                    <th style="width: 20%" class="text-center">Số lượng</th>
                                    <th style="width: 20%">Thành tiền</th>
                                    <th style="width: 10%">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.OrderDetails.Count == 0)
                                {
                                    <tr>
                                        <td colspan="5" class="text-center">Chưa có sản phẩm nào</td>
                                    </tr>
                                }
                                else
                                {
                                    foreach (var item in Model.OrderDetails)
                                    {
                                        <tr>
                                            <td>@item.Product.ProductName</td>
                                            <td>@item.UnitPrice?.ToString("N0") đ</td>
                                            <td class="text-center">
                                                <div class="d-flex align-items-center justify-content-center">
                                                    <button class="btn btn-sm btn-outline-danger me-2" 
                                                            onclick="updateOrderDetailQuantity(@item.OrderDetailId, -1)">
                                                        <i class="bi bi-dash-circle-fill"></i>
                                                    </button>
                                                    <span id="quantity-display-@item.OrderDetailId" class="fw-bold mx-2">@item.Quantity</span>
                                                    <button class="btn btn-sm btn-outline-success ms-2" 
                                                            onclick="updateOrderDetailQuantity(@item.OrderDetailId, 1)">
                                                        <i class="bi bi-plus-circle-fill"></i>
                                                    </button>
                                                </div>
                                            </td>
                                            <td id="subtotal-@item.OrderDetailId">@((item.UnitPrice * item.Quantity)?.ToString("N0")) đ</td>
                                            <td class="text-center">
                                                <button class="btn btn-sm btn-danger" 
                                                        onclick="removeOrderDetail(@item.OrderDetailId)">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end fw-bold">Tổng cộng:</td>
                                    <td colspan="2" class="fw-bold" id="orderTotalDisplay">@Model.OrderTotal.ToString("N0") đ</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
            
            <!-- Available Products -->
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-box me-2"></i>Thêm dịch vụ</h5>
                </div>
                <div class="card-body">
                    @{
                        var foodItems = Model.AvailableProducts.Where(p => p.ProductType == ProductType.FOOD).ToList();
                        var drinkItems = Model.AvailableProducts.Where(p => p.ProductType == ProductType.BEVERAGE).ToList();
                        bool hasFoodItems = foodItems.Any();
                        bool hasDrinkItems = drinkItems.Any();
                    }
                    
                    <ul class="nav nav-tabs mb-3" id="productTabs">
                        @if (hasFoodItems)
                        {
                            <li class="nav-item">
                                <a class="nav-link @(hasFoodItems ? "active" : "")" href="#foodTab" data-bs-toggle="tab">Đồ ăn</a>
                            </li>
                        }
                        @if (hasDrinkItems)
                        {
                            <li class="nav-item">
                                <a class="nav-link @(!hasFoodItems && hasDrinkItems ? "active" : "")" href="#drinksTab" data-bs-toggle="tab">Đồ uống</a>
                            </li>
                        }
                    </ul>
                    
                    <div class="tab-content">
                        @if (hasFoodItems)
                        {
                            <div class="tab-pane fade @(hasFoodItems ? "show active" : "")" id="foodTab">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th style="width: 30%">Tên món</th>
                                                <th style="width: 15%">Giá</th>
                                                <th style="width: 15%">Còn lại</th>
                                                <th style="width: 20%" class="text-center">Số lượng</th>
                                                <th style="width: 20%">Thao tác</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in foodItems)
                                            {
                                                <tr>
                                                    <td>@product.ProductName</td>
                                                    <td>@product.Price?.ToString("N0") đ</td>
                                                    <td id="stock-@product.ProductId">@product.Quantity</td>
                                                    <td class="text-center">
                                                        <input type="number" class="form-control form-control-sm mx-auto" 
                                                               style="max-width: 80px;"
                                                               min="1" max="@product.Quantity" value="1"
                                                               id="quantity-@product.ProductId"
                                                               data-product-id="@product.ProductId">
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-primary" 
                                                                onclick="addToOrder(@Model.Table.TableId, @product.ProductId)">
                                                            <i class="bi bi-plus-circle me-1"></i>Thêm
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                        
                        @if (hasDrinkItems)
                        {
                            <div class="tab-pane fade @(!hasFoodItems && hasDrinkItems ? "show active" : "")" id="drinksTab">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th style="width: 30%">Tên món</th>
                                                <th style="width: 15%">Giá</th>
                                                <th style="width: 15%">Còn lại</th>
                                                <th style="width: 20%" class="text-center">Số lượng</th>
                                                <th style="width: 20%">Thao tác</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var product in drinkItems)
                                            {
                                                <tr>
                                                    <td>@product.ProductName</td>
                                                    <td>@product.Price?.ToString("N0") đ</td>
                                                    <td id="stock-@product.ProductId">@product.Quantity</td>
                                                    <td class="text-center">
                                                        <input type="number" class="form-control form-control-sm mx-auto" 
                                                               style="max-width: 80px;"
                                                               min="1" max="@product.Quantity" value="1"
                                                               id="quantity-@product.ProductId"
                                                               data-product-id="@product.ProductId">
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-primary" 
                                                                onclick="addToOrder(@Model.Table.TableId, @product.ProductId)">
                                                            <i class="bi bi-plus-circle me-1"></i>Thêm
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                        
                        @if (!hasFoodItems && !hasDrinkItems)
                        {
                            <div class="alert alert-info">Không có dịch vụ nào</div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Timer variables
        let startTime = new Date('@Model.Session.StartTime?.ToString("yyyy-MM-ddTHH:mm:ss")');
        let pricePerHour = @Model.Table.PricePerHour;
        let timerInterval;
        
        // Initialize timer on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Start timer update interval
            timerInterval = setInterval(updateTimer, 1000);
            
            // Ensure initial calculations are correct
            updateAllTotals();
            
            // Initialize product inventory tracking
            initializeInventoryTracking();
            
            // Add event listeners to all quantity inputs to enforce max limits
            document.querySelectorAll('input[type="number"]').forEach(input => {
                const max = parseInt(input.getAttribute('max'));
                
                // Validate on input change
                input.addEventListener('input', function() {
                    validateQuantityInput(this, max);
                });
                
                // Validate when focus is lost
                input.addEventListener('blur', function() {
                    validateQuantityInput(this, max);
                });
                
                // Handle paste events
                input.addEventListener('paste', function(e) {
                    // Get pasted content
                    let pastedText = '';
                    if (window.clipboardData && window.clipboardData.getData) {
                        pastedText = window.clipboardData.getData('Text');
                    } else if (e.clipboardData && e.clipboardData.getData) {
                        pastedText = e.clipboardData.getData('text/plain');
                    }
                    
                    // Check if pasted content is a valid number
                    if (!/^\d+$/.test(pastedText)) {
                        e.preventDefault();
                        alert('Chỉ được phép nhập số');
                    } else {
                        // Check if pasted number exceeds max
                        const pastedNum = parseInt(pastedText);
                        if (pastedNum > max) {
                            e.preventDefault();
                            // Set to max instead
                            setTimeout(() => {
                                this.value = max;
                                alert(`Số lượng không thể vượt quá ${max} (số lượng còn trong kho)`);
                            }, 0);
                        }
                    }
                });
                
                // Prevent entering invalid values directly
                input.addEventListener('keydown', function(e) {
                    // Allow: backspace, delete, tab, escape, enter, arrows
                    if ([46, 8, 9, 27, 13, 37, 38, 39, 40].indexOf(e.keyCode) !== -1 ||
                        // Allow: Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                        (e.keyCode === 65 && e.ctrlKey === true) ||
                        (e.keyCode === 67 && e.ctrlKey === true) ||
                        (e.keyCode === 86 && e.ctrlKey === true) ||
                        (e.keyCode === 88 && e.ctrlKey === true) ||
                        // Allow: home, end
                        (e.keyCode >= 35 && e.keyCode <= 39)) {
                        return;
                    }
                    // Ensure that it is a number and stop the keypress if not
                    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && 
                        (e.keyCode < 96 || e.keyCode > 105)) {
                        e.preventDefault();
                    }
                });
            });
        });
        
        // Object to track real-time inventory
        const inventoryTracker = {
            // Map to store product quantities
            stock: new Map(),
            // Map to store quantities in the current order
            orderQuantities: new Map(),
            
            // Initialize with current stock levels
            initializeStock: function() {
                // Get all product stock elements
                document.querySelectorAll('[id^="stock-"]').forEach(el => {
                    const productId = el.id.replace('stock-', '');
                    const quantity = parseInt(el.textContent);
                    if (!isNaN(quantity)) {
                        this.stock.set(parseInt(productId), quantity);
                    }
                });
                
                // Initialize order quantities
                document.querySelectorAll('[id^="quantity-display-"]').forEach(el => {
                    const orderDetailId = el.id.replace('quantity-display-', '');
                    const quantity = parseInt(el.textContent);
                    if (!isNaN(quantity)) {
                        // Get product ID from data attribute if available
                        const row = el.closest('tr');
                        if (row) {
                            const productName = row.querySelector('td:first-child').textContent.trim();
                            this.orderQuantities.set(orderDetailId, {
                                quantity,
                                productName
                            });
                        }
                    }
                });
            },
            
            // Get available quantity for a product
            getAvailableQuantity: function(productId) {
                return this.stock.get(parseInt(productId)) || 0;
            },
            
            // Update stock after adding/removing from order
            updateStock: function(productId, change) {
                productId = parseInt(productId);
                const currentStock = this.stock.get(productId) || 0;
                const newStock = currentStock - change;
                
                // Update the tracker
                this.stock.set(productId, newStock);
                
                // Update the UI
                const stockElement = document.getElementById(`stock-${productId}`);
                if (stockElement) {
                    stockElement.textContent = newStock;
                }
                
                // Update max attribute of quantity input
                const quantityInput = document.getElementById(`quantity-${productId}`);
                if (quantityInput) {
                    quantityInput.max = newStock;
                    
                    // If current value is greater than new max, adjust it
                    if (parseInt(quantityInput.value) > newStock) {
                        quantityInput.value = newStock > 0 ? newStock : 1;
                    }
                }
                
                return newStock;
            }
        };
        
        // Initialize inventory tracking
        function initializeInventoryTracking() {
            inventoryTracker.initializeStock();
        }
        
        // Update timer function
        function updateTimer() {
            const now = new Date();
            const elapsedMs = now - startTime;
            
            // Calculate hours, minutes, seconds
            const elapsedSeconds = Math.floor(elapsedMs / 1000);
            const hours = Math.floor(elapsedSeconds / 3600);
            const minutes = Math.floor((elapsedSeconds % 3600) / 60);
            const seconds = elapsedSeconds % 60;
            
            // Format as HH:MM:SS
            const timeString = 
                String(hours).padStart(2, '0') + ':' + 
                String(minutes).padStart(2, '0') + ':' + 
                String(seconds).padStart(2, '0');
            
            // Update displayed time
            document.getElementById('elapsedTime').textContent = timeString;
            
            // Calculate and update table cost - exact calculation based on real-time usage
            const totalHours = elapsedMs / (1000 * 60 * 60);
            const tableTotal = totalHours * pricePerHour;
            
            // Format as currency
            const tableTotalFormatted = formatCurrency(tableTotal);
            document.getElementById('tableTotal').textContent = tableTotalFormatted;
            document.getElementById('tableTotalSummary').textContent = tableTotalFormatted;
            
            // Update totals
            updateAllTotals();
        }
        
        // Format currency function
        function formatCurrency(amount) {
            // Đảm bảo amount là một số
            if (typeof amount !== 'number') {
                amount = parseFloat(amount) || 0;
            }
            
            // Làm tròn đến số nguyên để tránh số thập phân
            amount = Math.round(amount);
            
            // Sử dụng NumberFormat để định dạng tiền tệ Việt Nam
            return new Intl.NumberFormat('vi-VN', {
                maximumFractionDigits: 0
            }).format(amount) + ' đ';
        }
        
        // Add product to order
        function addToOrder(tableId, productId) {
            const quantityInput = document.getElementById(`quantity-${productId}`);
            const quantity = parseInt(quantityInput.value);
            const maxQuantity = parseInt(quantityInput.getAttribute('max'));
            
            if (isNaN(quantity) || quantity < 1) {
                alert('Vui lòng nhập số lượng hợp lệ');
                return;
            }
            
            // Validate against maximum again before submission
            if (quantity > maxQuantity) {
                alert(`Số lượng không thể vượt quá ${maxQuantity} (số lượng còn trong kho)`);
                quantityInput.value = maxQuantity;
                return;
            }
            
            // Update inventory before sending request
            const newStock = inventoryTracker.updateStock(productId, quantity);
            if (newStock < 0) {
                alert('Số lượng trong kho không đủ');
                inventoryTracker.updateStock(productId, -quantity); // Revert the change
                return;
            }
            
            fetch('/Manager/AddOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `tableId=${tableId}&productId=${productId}&quantity=${quantity}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reload the page to refresh all data
                    location.reload();
                } else {
                    // Revert inventory change
                    inventoryTracker.updateStock(productId, -quantity);
                    alert(data.message || 'Có lỗi xảy ra');
                }
            })
            .catch(error => {
                // Revert inventory change
                inventoryTracker.updateStock(productId, -quantity);
                console.error('Error adding to order:', error);
                alert('Có lỗi xảy ra khi thêm sản phẩm');
            });
        }
        
        // Update order detail quantity
        function updateOrderDetailQuantity(orderDetailId, changeAmount) {
            // Get the product ID from the row if possible
            const quantityElement = document.getElementById(`quantity-display-${orderDetailId}`);
            if (!quantityElement) return;
            
            const row = quantityElement.closest('tr');
            const productName = row.querySelector('td:first-child').textContent.trim();
            
            // Find the product ID based on the product name
            let productId = null;
            document.querySelectorAll('[id^="stock-"]').forEach(el => {
                const id = el.id.replace('stock-', '');
                const nameCell = el.closest('tr').querySelector('td:first-child');
                if (nameCell && nameCell.textContent.trim() === productName) {
                    productId = parseInt(id);
                }
            });
            
            // If adding quantity, check if there's enough stock
            if (changeAmount > 0 && productId) {
                const availableStock = inventoryTracker.getAvailableQuantity(productId);
                if (availableStock < changeAmount) {
                    alert(`Không đủ số lượng ${productName} trong kho (chỉ còn ${availableStock})`);
                    return;
                }
                
                // Pre-emptively update stock display
                if (productId) inventoryTracker.updateStock(productId, changeAmount);
            }
            
            // Directly call the server-side validation
            fetch('/Manager/UpdateOrderDetailQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `orderDetailId=${orderDetailId}&changeAmount=${changeAmount}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.removed) {
                        // Nếu sản phẩm đã bị xóa (số lượng = 0), làm mới trang
                        location.reload();
                    } else {
                        // Cập nhật hiển thị số lượng và thành tiền
                        document.getElementById(`quantity-display-${orderDetailId}`).textContent = data.newQuantity;
                        document.getElementById(`subtotal-${orderDetailId}`).textContent = formatCurrency(data.subtotal);
                        
                        // Cập nhật tất cả các tổng tiền
                        updateAllTotals();
                    }
                } else {
                    // Revert stock change if there was an error
                    if (changeAmount > 0 && productId) {
                        inventoryTracker.updateStock(productId, -changeAmount);
                    }
                    alert(data.message || 'Có lỗi xảy ra');
                }
            })
            .catch(error => {
                // Revert stock change if there was an error
                if (changeAmount > 0 && productId) {
                    inventoryTracker.updateStock(productId, -changeAmount);
                }
                console.error('Error updating order detail:', error);
                alert('Có lỗi xảy ra khi cập nhật sản phẩm');
            });
        }
        
        // Remove item from order
        function removeOrderDetail(orderDetailId) {
            if (!confirm('Bạn có chắc chắn muốn xóa món này?')) return;
            
            // Lấy số lượng hiện tại
            const quantityElement = document.getElementById(`quantity-display-${orderDetailId}`);
            if (!quantityElement) return;
            
            const currentQuantity = parseInt(quantityElement.textContent);
            if (isNaN(currentQuantity)) return;
            
            // Find associated product ID by name
            const row = quantityElement.closest('tr');
            if (!row) return;
            
            const productName = row.querySelector('td:first-child').textContent.trim();
            let productId = null;
            
            // Look for matching product in available products
            document.querySelectorAll('[id^="stock-"]').forEach(el => {
                const id = el.id.replace('stock-', '');
                const nameCell = el.closest('tr').querySelector('td:first-child');
                if (nameCell && nameCell.textContent.trim() === productName) {
                    productId = parseInt(id);
                }
            });
            
            // If product ID found, update inventory display to add back stock
            if (productId) {
                // We use negative currentQuantity because we're returning items to stock
                inventoryTracker.updateStock(productId, -currentQuantity);
            }
            
            // Gọi hàm cập nhật với giá trị âm bằng số lượng hiện tại (về 0)
            fetch('/Manager/UpdateOrderDetailQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `orderDetailId=${orderDetailId}&changeAmount=${-currentQuantity}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    // If failed, revert the inventory change
                    if (productId) {
                        inventoryTracker.updateStock(productId, currentQuantity);
                    }
                    alert(data.message || 'Có lỗi xảy ra khi xóa sản phẩm');
                }
            })
            .catch(error => {
                // If error, revert the inventory change
                if (productId) {
                    inventoryTracker.updateStock(productId, currentQuantity);
                }
                console.error('Error removing order detail:', error);
                alert('Có lỗi xảy ra khi xóa sản phẩm');
            });
        }
        
        // Function to update all totals on the page
        function updateAllTotals() {
            // Calculate service total
            let serviceTotal = 0;
            const subtotalElements = document.querySelectorAll('[id^="subtotal-"]');
            subtotalElements.forEach(el => {
                const valueText = el.textContent.trim();
                const numericValue = parseFloat(valueText.replace(/\D/g, ''));
                if (!isNaN(numericValue)) {
                    serviceTotal += numericValue;
                }
            });
            
            // Format and display service total
            document.getElementById('serviceTotalSummary').textContent = formatCurrency(serviceTotal);
            document.getElementById('orderTotalDisplay').textContent = formatCurrency(serviceTotal);
            
            // Get table total
            const tableText = document.getElementById('tableTotal').textContent.trim();
            const tableTotal = parseFloat(tableText.replace(/\D/g, '')) || 0;
            
            // Update grand total
            const grandTotal = tableTotal + serviceTotal;
            document.getElementById('grandTotal').textContent = formatCurrency(grandTotal);
        }

        // Add a helper function to validate quantity inputs
        function validateQuantityInput(input, maxValue) {
            let value = parseInt(input.value);
            
            // Check if the value exceeds the maximum
            if (value > maxValue) {
                input.value = maxValue; // Reset to maximum allowed
                alert(`Số lượng không thể vượt quá ${maxValue} (số lượng còn trong kho)`);
            }
            
            // Ensure minimum value is 1
            if (value < 1 || isNaN(value) || input.value === '') {
                input.value = 1;
            }
        }
    </script>
} 