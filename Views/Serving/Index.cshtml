@model IEnumerable<BilliardsManagement.Models.Entities.Table>
@{
    ViewData["Title"] = "Phục vụ bàn";
    Layout = "_Layout";
}

<div class="container-fluid mt-4">
    <h2><i class="bi bi-server me-2"></i>Dashboard Phục vụ</h2>

    <div class="row g-4 mb-4">
        <!-- Booking Function -->
        <div class="col-md-6">
            <div class="card h-100">
                <div class="card-body text-center">
                    <i class="bi bi-calendar-check fs-1 text-primary mb-3"></i>
                    <h5 class="card-title">Đặt bàn</h5>
                    <p class="card-text">Quản lý đặt bàn và gọi thức uống</p>
                    <a href="@Url.Action("Booking", "Serving")" class="btn btn-primary">
                        <i class="bi bi-arrow-right-circle me-2"></i>Truy cập
                    </a>
                </div>
            </div>
        </div>

        <!-- Table Transfer Function (conditional) -->
        @if (ViewBag.HasTableTransferPermission == true)
        {
            <div class="col-md-6">
                <div class="card h-100">
                    <div class="card-body text-center">
                        <i class="bi bi-arrow-left-right fs-1 text-purple mb-3" style="color: #6f42c1;"></i>
                        <h5 class="card-title">Chuyển bàn</h5>
                        <p class="card-text">Chuyển khách từ bàn này sang bàn khác</p>
                        <a href="@Url.Action("TableTransfer", "Serving")" class="btn btn-outline-purple" style="color: #6f42c1; border-color: #6f42c1;">
                            <i class="bi bi-arrow-right-circle me-2"></i>Truy cập
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        let currentTableId = 0;
        let currentSessionId = 0;
        let addServiceModal;
        let selectedInvoiceId = null;
        let selectedPaymentMethod = null;
        
        document.addEventListener('DOMContentLoaded', function() {
            addServiceModal = new bootstrap.Modal(document.getElementById('addServiceModal'));
            
            // Search functionality
            document.getElementById('searchProducts').addEventListener('keyup', function() {
                const searchTerm = this.value.toLowerCase();
                const tables = document.querySelectorAll('#foodTable tbody tr, #drinksTable tbody tr');
                
                tables.forEach(row => {
                    const productName = row.querySelector('td:first-child').textContent.toLowerCase();
                    if (productName.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                });
            });
            
            // Update view periodically
            setInterval(function() {
                window.location.reload();
            }, 60000); // Refresh every minute
        });
        
        function openServiceModal(tableId, tableName, sessionId) {
            currentTableId = tableId;
            currentSessionId = sessionId;
            
            // Set table name in modal
            document.getElementById('modalTableName').textContent = tableName;
            
            // Load available products
            loadAvailableProducts();
            
            // Load current order
            loadCurrentOrder();
            
            // Show modal
            addServiceModal.show();
        }
        
        function loadAvailableProducts() {
            // Clear existing data
            document.querySelector('#foodTable tbody').innerHTML = '';
            document.querySelector('#drinksTable tbody').innerHTML = '';
            
            // Fetch products from server
            fetch('/Serving/GetAvailableProducts')
                .then(response => response.json())
                .then(data => {
                    // Process food items
                    const foodItems = data.filter(p => p.productType === 'FOOD');
                    const foodTableBody = document.querySelector('#foodTable tbody');
                    
                    foodItems.forEach(item => {
                        const row = createProductRow(item);
                        foodTableBody.appendChild(row);
                    });
                    
                    // Process drink items
                    const drinkItems = data.filter(p => p.productType === 'BEVERAGE');
                    const drinksTableBody = document.querySelector('#drinksTable tbody');
                    
                    drinkItems.forEach(item => {
                        const row = createProductRow(item);
                        drinksTableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error loading products:', error));
        }
        
        function createProductRow(product) {
            const row = document.createElement('tr');
            
            row.innerHTML = `
                <td>${product.productName}</td>
                <td>${product.price?.toLocaleString('vi-VN')} đ</td>
                <td>${product.quantity}</td>
                <td>
                    <input type="number" class="form-control form-control-sm" min="1" max="${product.quantity}" value="1">
                </td>
                <td>
                    <button class="btn btn-sm btn-primary" onclick="addToOrder(${product.productId}, this.parentElement.previousElementSibling.querySelector('input').value)">
                        <i class="bi bi-plus-circle me-1"></i>Thêm
                    </button>
                </td>
            `;
            
            return row;
        }
        
        function loadCurrentOrder() {
            // Clear existing data
            document.querySelector('#currentOrderTable tbody').innerHTML = '';
            
            // Fetch current order from server
            fetch(`/Serving/GetCurrentOrder?sessionId=${currentSessionId}`)
                .then(response => response.json())
                .then(data => {
                    const orderTableBody = document.querySelector('#currentOrderTable tbody');
                    let total = 0;
                    
                    if (data.length === 0) {
                        const emptyRow = document.createElement('tr');
                        emptyRow.innerHTML = `<td colspan="4" class="text-center">Chưa có sản phẩm nào</td>`;
                        orderTableBody.appendChild(emptyRow);
                    } else {
                        data.forEach(item => {
                            const row = document.createElement('tr');
                            const itemTotal = item.quantity * item.unitPrice;
                            total += itemTotal;
                            
                            row.innerHTML = `
                                <td>${item.productName}</td>
                                <td>${item.quantity}</td>
                                <td>${itemTotal.toLocaleString('vi-VN')} đ</td>
                                <td>
                                    <button class="btn btn-sm btn-danger" onclick="removeFromOrder(${item.orderDetailId})">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </td>
                            `;
                            
                            orderTableBody.appendChild(row);
                        });
                    }
                    
                    // Update total
                    document.getElementById('orderTotal').textContent = total.toLocaleString('vi-VN') + ' đ';
                })
                .catch(error => console.error('Error loading current order:', error));
        }
        
        function addToOrder(productId, quantity) {
            fetch('/Serving/AddOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `tableId=${currentTableId}&productId=${productId}&quantity=${quantity}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reload current order
                    loadCurrentOrder();
                    // Reload available products
                    loadAvailableProducts();
                } else {
                    alert(data.message || 'Có lỗi xảy ra');
                }
            })
            .catch(error => console.error('Error adding to order:', error));
        }
        
        function removeFromOrder(orderDetailId) {
            if (!confirm('Bạn có chắc chắn muốn xóa món này?')) return;
            
            fetch('/Serving/RemoveOrderDetail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `orderDetailId=${orderDetailId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Reload current order
                    loadCurrentOrder();
                    // Reload available products
                    loadAvailableProducts();
                } else {
                    alert(data.message || 'Có lỗi xảy ra');
                }
            })
            .catch(error => console.error('Error removing from order:', error));
        }

        // Payment functions
        function showPendingInvoicesModal() {
            $('#pendingInvoicesModal').modal('show');
            loadPendingInvoices();
        }

        function loadPendingInvoices() {
            const container = document.getElementById('pendingInvoicesContent');
            container.innerHTML = '<div class="text-center"><i class="spinner-border"></i> Đang tải...</div>';
            
            fetch('@Url.Action("GetPendingInvoices", "Serving")')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.data.length > 0) {
                        displayPendingInvoices(data.data);
                    } else {
                        container.innerHTML = '<div class="text-center text-muted py-4"><i class="bi bi-info-circle fs-3 mb-2 d-block"></i>Không có hóa đơn nào chờ thanh toán</div>';
                    }
                })
                .catch(error => {
                    console.error('Error loading pending invoices:', error);
                    container.innerHTML = '<div class="text-center text-danger py-4"><i class="bi bi-exclamation-circle fs-3 mb-2 d-block"></i>Lỗi khi tải dữ liệu</div>';
                });
        }

        function displayPendingInvoices(invoices) {
            let html = '<div class="row g-3">';
            invoices.forEach(invoice => {
                html += `
                    <div class="col-md-6 mb-3">
                        <div class="card border-primary">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="card-title mb-1">Bàn ${invoice.tableName}</h6>
                                        <small class="text-muted">Bắt đầu: ${invoice.startTime || 'N/A'}</small><br>
                                        <small class="text-muted">Thời gian: ${invoice.sessionDuration || 'N/A'}</small>
                                    </div>
                                    <div class="text-end">
                                        <div class="fw-bold text-primary">${formatCurrency(invoice.totalAmount)}</div>
                                        <small class="text-muted">Tiền bàn: ${formatCurrency(invoice.tableTotal || 0)}</small><br>
                                        <small class="text-muted">Dịch vụ: ${formatCurrency(invoice.serviceTotal || 0)}</small>
                                    </div>
                                </div>
                                <div class="mt-3">
                                    <button class="btn btn-outline-primary btn-sm me-2" onclick="viewInvoiceDetails(${invoice.invoiceId})">
                                        <i class="bi bi-eye me-1"></i>Chi tiết
                                    </button>
                                    <button class="btn btn-success btn-sm" onclick="showPaymentModal(${invoice.invoiceId}, '${invoice.tableName}', ${invoice.totalAmount})">
                                        <i class="bi bi-credit-card me-1"></i>Thanh toán
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            html += '</div>';

            document.getElementById('pendingInvoicesContent').innerHTML = html;
        }

        function showPaymentModal(invoiceId, tableName, totalAmount) {
            selectedInvoiceId = invoiceId;
            $('#paymentInvoiceId').text(invoiceId);
            $('#paymentTableName').text(tableName);
            $('#paymentTotal').text(formatCurrency(totalAmount));
            
            // Reset payment method to cash
            $('#cash').prop('checked', true);
            
            // Load invoice details for breakdown
            loadInvoiceBreakdown(invoiceId);
            
            $('#paymentModal').modal('show');
        }

        function loadInvoiceBreakdown(invoiceId) {
            // Set loading state
            $('#paymentPlayTime').text('Đang tải...');
            $('#paymentTableCost').text('0₫');
            $('#paymentServiceCost').text('0₫');
            $('#serviceDetails').html('<div class="text-muted"><small>Đang tải...</small></div>');
            
            $.get('@Url.Action("GetInvoiceDetails", "Serving")', { invoiceId: invoiceId }, function(response) {
                if (response.success) {
                    const data = response.data;
                    
                    // Update time and table cost
                    $('#paymentPlayTime').text(data.playTime || '0 giờ 0 phút');
                    $('#paymentTableCost').text(formatCurrency(data.tableTotal || 0));
                    $('#paymentServiceCost').text(formatCurrency(data.serviceTotal || 0));
                    
                    // Update QR modal values too
                    $('#qrPaymentPlayTime').text(data.playTime || '0 giờ 0 phút');
                    $('#qrPaymentTableCost').text(formatCurrency(data.tableTotal || 0));
                    $('#qrPaymentServiceCost').text(formatCurrency(data.serviceTotal || 0));
                    
                    // Build service details HTML
                    let serviceHtml = '';
                    if (data.orderDetails && data.orderDetails.length > 0) {
                        data.orderDetails.forEach(item => {
                            serviceHtml += `
                                <div class="row mb-1">
                                    <div class="col-6">
                                        <small class="text-muted">${item.productName} x ${item.quantity}</small>
                                    </div>
                                    <div class="col-6 text-end">
                                        <small class="text-muted">${formatCurrency(item.total)}</small>
                                    </div>
                                </div>
                            `;
                        });
                    } else {
                        serviceHtml = '<div class="text-muted"><small>Không có dịch vụ</small></div>';
                    }
                    
                    $('#serviceDetails').html(serviceHtml);
                    $('#qrServiceDetails').html(serviceHtml);
                    
                } else {
                    $('#paymentPlayTime').text('Lỗi tải dữ liệu');
                    $('#paymentTableCost').text('0₫');
                    $('#paymentServiceCost').text('0₫');
                    $('#serviceDetails').html('<div class="text-danger"><small>Lỗi tải dữ liệu</small></div>');
                }
            }).fail(function() {
                $('#paymentPlayTime').text('Lỗi tải dữ liệu');
                $('#paymentTableCost').text('0₫');
                $('#paymentServiceCost').text('0₫');
                $('#serviceDetails').html('<div class="text-danger"><small>Lỗi tải dữ liệu</small></div>');
            });
        }

        function processPayment() {
            if (!selectedInvoiceId) {
                alert('Không có hóa đơn được chọn!');
                return;
            }

            const paymentMethod = $('input[name="paymentMethod"]:checked').val();
            
            // If QR Pay is selected, show QR modal instead
            if (paymentMethod === 'QR_PAY') {
                showQRPaymentModal();
                return;
            }
            
            // Process Cash/Card payment directly
            processDirectPayment(paymentMethod);
        }

        function showQRPaymentModal() {
            if (!selectedInvoiceId) {
                alert('Lỗi: Không xác định được hóa đơn. Vui lòng thử lại.');
                return;
            }
            
            // Copy data from payment modal to QR modal
            $('#qrTableName').text($('#paymentTableName').text());
            $('#qrInvoiceId').text($('#paymentInvoiceId').text());
            $('#qrPaymentAmount').text($('#paymentTotal').text());
            
            // Hide payment modal and show QR modal
            $('#paymentModal').modal('hide');
            setTimeout(() => {
                $('#qrPaymentModal').modal('show');
            }, 300);
        }

        function completeQRPayment() {
            if (!selectedInvoiceId) {
                alert('Không có hóa đơn được chọn!');
                return;
            }
            
            if (confirm('Bạn đã xác nhận nhận được tiền chuyển khoản?')) {
                processDirectPayment('QR_PAY');
            }
        }

        function processDirectPayment(paymentMethod) {
            if (!selectedInvoiceId) {
                alert('Vui lòng chọn hóa đơn!');
                return;
            }

            const btn = paymentMethod === 'QR_PAY' 
                ? document.querySelector('button[onclick="completeQRPayment()"]')
                : document.querySelector('button[onclick="processPayment()"]');
            
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="spinner-border spinner-border-sm me-2"></i>Đang xử lý...';
            btn.disabled = true;

            fetch('@Url.Action("ProcessPayment", "Serving")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `invoiceId=${selectedInvoiceId}&paymentMethod=${paymentMethod}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide all modals
                    $('#paymentModal').modal('hide');
                    $('#qrPaymentModal').modal('hide');
                    
                    // Show success message
                    const paymentMethodName = getPaymentMethodName(paymentMethod);
                    alert(`Thanh toán ${paymentMethodName} thành công!`);
                    
                    // Reset and reload
                    selectedInvoiceId = null;
                    location.reload();
                } else {
                    alert('Lỗi: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error processing payment:', error);
                alert('Có lỗi xảy ra khi xử lý thanh toán!');
            })
            .finally(() => {
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
        }

        function viewInvoiceDetails(invoiceId) {
            // Load and show invoice details in a modal
            $.get('@Url.Action("GetInvoiceDetails", "Serving")', { invoiceId: invoiceId }, function(response) {
                if (response.success) {
                    showInvoiceDetailsModal(response.data);
                } else {
                    alert('Lỗi: ' + response.message);
                }
            });
        }

        function showInvoiceDetailsModal(data) {
            let orderHtml = '';
            if (data.orderDetails && data.orderDetails.length > 0) {
                orderHtml = `
                    <h6 class="mt-3">Chi tiết dịch vụ:</h6>
                    <div class="table-responsive">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Sản phẩm</th>
                                    <th>SL</th>
                                    <th>Đơn giá</th>
                                    <th>Thành tiền</th>
                                </tr>
                            </thead>
                            <tbody>
                `;
                
                data.orderDetails.forEach(item => {
                    orderHtml += `
                        <tr>
                            <td>${item.productName}</td>
                            <td>${item.quantity}</td>
                            <td>${formatCurrency(item.unitPrice)}</td>
                            <td>${formatCurrency(item.total)}</td>
                        </tr>
                    `;
                });
                
                orderHtml += `
                            </tbody>
                        </table>
                    </div>
                `;
            } else {
                orderHtml = '<p class="text-muted mt-3">Chưa có dịch vụ nào được gọi.</p>';
            }

            alert(`Chi tiết hóa đơn #${data.invoiceId}\nBàn: ${data.tableName}\nTổng: ${formatCurrency(data.grandTotal || data.totalAmount)}`);
        }

        function refreshPendingInvoices() {
            loadPendingInvoices();
        }

        function getPaymentMethodName(method) {
            switch(method) {
                case 'CASH': return 'Tiền mặt';
                case 'CARD': return 'Thẻ ATM';
                case 'QR_PAY': return 'QR Pay';
                default: return method;
            }
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(amount);
        }

        function showServiceModal() {
            // Scroll down to table list
            document.querySelector('.row').scrollIntoView({ behavior: 'smooth' });
        }
    </script>
}<style>
.payment-method-card {
    cursor: pointer;
    transition: all 0.3s ease;
    border: 2px solid transparent;
}

.payment-method-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.payment-method-card.border-primary {
    border-color: #0d6efd !important;
}

.qr-container {
    display: flex;
    justify-content: center;
    align-items: center;
}

.qr-container img {
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.invoice-row.table-primary {
    background-color: rgba(13, 110, 253, 0.1) !important;
}
.invoice-row:hover {
    background-color: rgba(0,0,0,0.05);
}.bg-gradient {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
}</style>





